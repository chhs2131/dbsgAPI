<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dbsgapi.dbsgapi.api.ipo.mapper.IpoMapper">
    <select id="selectIpos" parameterType="Map" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoSummaryDto">
        SELECT ipo.ipo_index,
               stock_name,
               IF(INSTR(stock_name,'스팩')=0 AND INSTR(stock_name, '기업인수목적')=0, stock_kinds, '스팩주') AS stock_kinds,
               stock_exchange,
               DATE_FORMAT(ipo_forecast_start, '%Y-%m-%d') ipo_forecast_start,
               DATE_FORMAT(ipo_forecast_end, '%Y-%m-%d') ipo_forecast_end,
               DATE_FORMAT(ipo_start_date, '%Y-%m-%d') ipo_start_date,
               DATE_FORMAT(ipo_end_date, '%Y-%m-%d') ipo_end_date,
               DATE_FORMAT(ipo_refund_date, '%Y-%m-%d') ipo_refund_date,
               DATE_FORMAT(ipo_debut_date, '%Y-%m-%d') ipo_debut_date,
               under.underwriter,

               ipo_price_low,
               ipo_price_high,
               ipo_price,

               ipo_cancel_bool,
               DATE_FORMAT(ipo_cancel_date, '%Y-%m-%d') ipo_cancel_date
        FROM ipo LEFT OUTER JOIN
             (
                 SELECT iu.ipo_index, GROUP_CONCAT(iu.under_name ORDER BY iu.ind_total_max DESC) AS underwriter
                 FROM(
                         SELECT DISTINCT
                                         ipo_underwriter.ipo_index,
                                         ipo_underwriter.ind_total_max,
                                         IFNULL(uc2.underwriter_name, ipo_underwriter.under_name) AS under_name
                         FROM
                             underwriter_code AS uc1
                                 JOIN underwriter_code AS uc2
                                     ON uc1.parents_code = uc2.underwriter_code
                                 RIGHT OUTER JOIN ipo_underwriter
                                     ON ipo_underwriter.under_name LIKE CONCAT('%', uc1.underwriter_name, '%')
                     ) AS iu
                 GROUP BY iu.ipo_index
             ) AS under
             ON ipo.ipo_index = under.ipo_index
        WHERE
              stock_exchange IS NOT NULL
              <if test="!withCancelItem">
                 AND ipo_cancel_bool = 'N'
              </if>
              <choose>
                  <when test="ipoSequence == 'CANCEL'">
                      AND ipo_cancel_bool = 'Y'
                    ORDER BY ipo_cancel_date DESC
                  </when>
                  <when test="ipoSequence == 'TODAY'">
                      AND
                    ( #{targetDate} = ipo_cancel_date
                      OR #{targetDate} = ipo_debut_date
                      OR #{targetDate} = ipo_refund_date
                      OR #{targetDate} BETWEEN ipo_forecast_start AND ipo_forecast_end
                      OR #{targetDate} BETWEEN ipo_start_date AND ipo_end_date
                    )
                    ORDER BY ipo_start_date DESC
                  </when>
                  <when test="ipoSequence == 'BEFORE_FORECAST'">
                      AND #{targetDate} &lt; ipo.ipo_forecast_start
                    ORDER BY ipo_forecast_start ASC
                  </when>
                  <when test="ipoSequence == 'BEFORE_IPO' or ipoSequence == 'AFTER_FORECAST'">
                      AND #{targetDate} BETWEEN DATE_ADD(IFNULL(ipo_forecast_end, regist_date), INTERVAL 1 DAY) AND DATE_SUB(ipo_start_date, INTERVAL 1 DAY)
                    ORDER BY ipo_start_date ASC
                  </when>
                  <when test="ipoSequence == 'BEFORE_REFUND' or ipoSequence == 'AFTER_IPO'">
                      AND #{targetDate} BETWEEN DATE_ADD(ipo_end_date, INTERVAL 1 DAY) AND DATE_SUB(ipo_refund_date, INTERVAL 1 DAY)
                    ORDER BY ipo_refund_date ASC
                  </when>
                  <when test="ipoSequence == 'BEFORE_DEBUT' or ipoSequence == 'AFTER_REFUND'">
                      AND #{targetDate} BETWEEN DATE_ADD(ipo_refund_date, INTERVAL 1 DAY) AND DATE_SUB(ipo_debut_date, INTERVAL 1 DAY)
                    ORDER BY ipo_debut_date ASC
                  </when>
                  <when test="ipoSequence == 'AFTER_DEBUT'">
                      AND #{targetDate} >= ipo_debut_date
                    ORDER BY ipo_debut_date DESC
                  </when>
                  <otherwise>
                    ORDER BY
                        (ifnull(terminate_date, ipo_debut_date) IS NULL) DESC,
                        ifnull(terminate_date, ipo_debut_date) DESC,
                        ipo_start_date DESC,
                        ipo.regist_date DESC
                  </otherwise>
              </choose>
        LIMIT #{limit} OFFSET #{offset};
    </select>

    <select id="selectIpo" parameterType="Long" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoDto">
        SELECT ipo_index,
               stock_name,
               stock_exchange,
               IF(INSTR(stock_name,'스팩')=0 AND INSTR(stock_name, '기업인수목적')=0, stock_kinds, '스팩주') AS stock_kinds,
               stock_code,
               dart_code,
               ipo.sector AS sector_code,
               sector_code.sector_desc AS sector,
               profits,
               sales,

               DATE_FORMAT(ex_start_date, '%Y-%m-%d') ex_start_date,
               DATE_FORMAT(ex_end_date, '%Y-%m-%d') ex_end_date,
               DATE_FORMAT(ipo_forecast_start, '%Y-%m-%d') ipo_forecast_start,
               DATE_FORMAT(ipo_forecast_end, '%Y-%m-%d') ipo_forecast_end,
               DATE_FORMAT(ipo_start_date, '%Y-%m-%d') ipo_start_date,
               DATE_FORMAT(ipo_end_date, '%Y-%m-%d') ipo_end_date,
               DATE_FORMAT(ipo_refund_date, '%Y-%m-%d') ipo_refund_date,
               DATE_FORMAT(ipo_debut_date, '%Y-%m-%d') ipo_debut_date,

               ipo_cancel_bool,
               DATE_FORMAT(ipo_cancel_date, '%Y-%m-%d') ipo_cancel_date,
               ipo_cancel_reason,

               purpose_of_funds,
               lock_up_percent,
               ipo_institutional_acceptance_rate,
               ipo_price,
               ipo_price_low,
               ipo_price_high,
               ipo_min_deposit,

               put_back_option_who,
               put_back_option_price,
               put_back_option_deadline,
               tag,
               DATE_FORMAT(regist_date, '%Y-%m-%d') regist_date,
               DATE_FORMAT(update_date, '%Y-%m-%d') update_date,
               DATE_FORMAT(terminate_date, '%Y-%m-%d') terminate_date
        FROM 	ipo LEFT OUTER JOIN sector_code ON ipo.sector = sector_code.sector_code
        WHERE 	ipo_index = #{ipoIndex}
    </select>

    <select id="selectIpoScheduleList" parameterType="Map" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoSummaryDto">
        SELECT ipo.ipo_index,
               stock_name,
               IF(INSTR(stock_name,'스팩')=0 AND INSTR(stock_name, '기업인수목적')=0, stock_kinds, '스팩주') AS stock_kinds,
               stock_exchange,
               DATE_FORMAT(ipo_forecast_start, '%Y-%m-%d') ipo_forecast_start,
               DATE_FORMAT(ipo_forecast_end, '%Y-%m-%d') ipo_forecast_end,
               DATE_FORMAT(ipo_start_date, '%Y-%m-%d') ipo_start_date,
               DATE_FORMAT(ipo_end_date, '%Y-%m-%d') ipo_end_date,
               DATE_FORMAT(ipo_refund_date, '%Y-%m-%d') ipo_refund_date,
               DATE_FORMAT(ipo_debut_date, '%Y-%m-%d') ipo_debut_date,
               ipo_cancel_bool,
               DATE_FORMAT(ipo_cancel_date, '%Y-%m-%d') ipo_cancel_date,
               under.underwriter
        FROM ipo LEFT OUTER JOIN
             (SELECT iu.ipo_index, GROUP_CONCAT(iu.under_name ORDER BY iu.ind_total_max DESC) AS underwriter
              FROM(
                      SELECT DISTINCT
                          ipo_underwriter.ipo_index,
                          ipo_underwriter.ind_total_max,
                          IFNULL(uc2.underwriter_name, ipo_underwriter.under_name) AS under_name
                      FROM
                          underwriter_code AS uc1
                              JOIN underwriter_code AS uc2
                                   ON uc1.parents_code = uc2.underwriter_code
                              RIGHT OUTER JOIN ipo_underwriter
                                               ON ipo_underwriter.under_name LIKE CONCAT('%', uc1.underwriter_name, '%')
              ) AS iu
              GROUP BY iu.ipo_index) AS under
             ON ipo.ipo_index = under.ipo_index
        WHERE
            stock_exchange IS NOT NULL
            AND ipo_cancel_bool = 'N'
            AND (
                (ipo_forecast_start BETWEEN #{startDate} AND #{endDate}) OR
                (ipo_forecast_end BETWEEN #{startDate} AND #{endDate}) OR
                (ipo_start_date BETWEEN #{startDate} AND #{endDate}) OR
                (ipo_end_date BETWEEN #{startDate} AND #{endDate}) OR
                (ipo_refund_date BETWEEN #{startDate} AND #{endDate}) OR
                (ipo_debut_date BETWEEN #{startDate} AND #{endDate})
            )
        ORDER BY
            (ifnull(terminate_date, ipo_debut_date) IS NULL) DESC,
            ifnull(terminate_date, ipo_debut_date) DESC,
            ipo_start_date DESC,
            ipo.regist_date DESC
        LIMIT 100;
    </select>

    <select id="selectIpoCommentList" parameterType="Map" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoCommentDto">
        SELECT ipo_comment.comment_index,
               ipo_comment.ipo_index,
               ipo.stock_name,
               IF(INSTR(ipo.stock_name,'스팩')=0 AND INSTR(stock_name, '기업인수목적')=0, ipo.stock_kinds, '스팩주') AS stock_kinds,
               ipo_comment.comment,
               ipo_comment.writer,
               date_format(ipo_comment.regist_date, '%Y-%m-%d') regist_date,
               ipo_comment.log_type,
               ipo_comment.change_log_json
        FROM ipo_comment
                 LEFT JOIN ipo ON ipo_comment.ipo_index = ipo.ipo_index
        WHERE ipo_comment.regist_date BETWEEN #{startDate} and #{endDate}
        ORDER BY comment_index DESC
        LIMIT 200;
    </select>

    <select id="selectIpoComment" parameterType="Long" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoCommentDto">
        SELECT comment_index,
               ipo_index,
               comment,
               writer,
               DATE_FORMAT(regist_date, '%Y-%m-%d') regist_date,
               log_type,
               change_log_json
        FROM 	ipo_comment
        WHERE 	ipo_index = #{ipoIndex} and enabled not like 'N'

        ORDER BY regist_date DESC
        LIMIT   100;
    </select>

    <select id="selectIpoCommentIndex" parameterType="Long" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoCommentDto">
        SELECT comment_index,
               ipo_index,
               comment,
               writer,
               DATE_FORMAT(regist_date, '%Y-%m-%d') regist_date,
               log_type,
               change_log_json
        FROM 	ipo_comment
        WHERE 	comment_index = #{commentIndex} and enabled not like 'N';
    </select>

    <select id="selectIpoUnderwriter" parameterType="Long" resultType="com.dbsgapi.dbsgapi.api.ipo.dto.IpoUnderwriterDto">
        SELECT DISTINCT
            ipo_underwriter.ipo_index,
            IFNULL(uc2.underwriter_name, ipo_underwriter.under_name) AS under_name,
            ipo_underwriter.ind_total_max,
            ipo_underwriter.ind_total_min,
            ipo_underwriter.ind_total_max,
            ipo_underwriter.ind_total_min,
            ipo_underwriter.sub_min_quan,
            ipo_underwriter.sub_deposit_percent,
            DATE_FORMAT(ipo_underwriter.update_date, '%Y-%m-%d') update_date
        FROM
            underwriter_code AS uc1
                JOIN underwriter_code AS uc2
                     ON uc1.parents_code = uc2.underwriter_code
                RIGHT OUTER JOIN ipo_underwriter
                                 ON ipo_underwriter.under_name LIKE CONCAT('%', uc1.underwriter_name, '%')
        WHERE
            ipo_underwriter.ipo_index = #{ipoIndex};
    </select>
</mapper>
